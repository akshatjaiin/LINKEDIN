from django.shortcuts import render, redirect
from linkedin_api import Linkedin
from openai import OpenAI
from django.views.decorators.csrf import csrf_exempt
import re
from . import jobs
import os
from dotenv import load_dotenv
load_dotenv()  # Loads from .env automatically
LINKEDIN_EMAIL = os.getenv("LINKEDIN_EMAIL")
LINKEDIDN_PASSWORD = os.getenv("LINKEDIN_PASSWORD")
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
client = OpenAI(api_key=OPENAI_API_KEY)

def extract_linkedin_username(url):
    # Matches linkedin.com/in/USERNAME or /pub/USERNAME etc.
    match = re.search(r'linkedin\.com/(?:in|pub)/([a-zA-Z0-9\-_%]+)', url)
    if match:
        return match.group(1)
    return None

@csrf_exempt  # Only for testing, use CSRF properly in production!
def index(request):
    if request.method == 'POST':
        print("trying to stay")
        profile_url = request.POST.get('linkedin_url')
        username = extract_linkedin_username(profile_url)
        
        if not username:
            return render(request, 'index.html', {'error': 'Invalid LinkedIn URL'})

        try:        
            # Fetch data
            print("trying to do  api creation")
            api = Linkedin(LINKEDIN_EMAIL, LINKEDIDN_PASSWORD)
            print(api)
            print("api creation success")

            resume_data = api.get_profile(username)
            contact = api.get_profile_contact_info(username)

            # Save to session or pass via redirect
            request.session['resume_data'] = resume_data
            request.session['contact'] = contact
            print
            return redirect('resume')  # URL name of your resume view
        except Exception as e:
            return render(request, 'index.html', {'error': f'Error: {str(e)}'})

    return render(request, 'index.html')

@csrf_exempt 
def resume(request):
    if request.method == "POST":
        print("here")
        jobs_data = jobs.fetch_jobs("software engg")
        request.session['jobs'] = jobs_data
        return redirect('ai_analysis')

    resume_data = request.session.get('resume_data')
    contact = request.session.get('contact')

    if not resume_data:
        return redirect('index')  # If no data, go back

    return render(request, 'resume.html', {
        'data': resume_data,
        'contact': contact
    })



def ai_analysis(request):
    response = client.responses.create(
        model="gpt-4o-mini-2024-07-18",
        input=f"Analyse my linkedin profile and suggest improvements based on the following data: {request.session.get('resume_data', {})} here are some jobs generated by the system: {request.session.get('jobs', [])}",
    )
    return render(request, "ai_analysis.html", {
        'analysis': response.output_text,
        'jobs_data': request.session.get('jobs')
    })


